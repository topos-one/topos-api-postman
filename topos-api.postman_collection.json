{
	"info": {
		"_postman_id": "678a5059-8732-452d-bdc0-09d2fb2bf3bc",
		"name": "topos-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8573415"
	},
	"item": [
		{
			"name": "payIn",
			"item": [
				{
					"name": "testRateQuery",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Fixed the incorrect usage of CryptoJS.HmacSHA256\r",
									"class HmacUtil {\r",
									"  static hmac256(key, msg) {\r",
									"    const mac = CryptoJS.HmacSHA256(msg, key); // Corrected the order of parameters\r",
									"    const data = CryptoJS.enc.Hex.stringify(mac).toLowerCase(); // Changed update and digest to enc.Hex.stringify\r",
									"    console.log(`HmacSHA256 rawContent is [${msg}], key is [${key}], hash result is [${data}]`);\r",
									"    return data;\r",
									"  }\r",
									"\r",
									"  static getStringToSign(params) {\r",
									"    const treeMap = params instanceof Map\r",
									"      ? new Map([...params.entries()].sort())\r",
									"      : new Map(Object.entries(params).sort());\r",
									"    let s2s = '';\r",
									"\r",
									"    for (const [k, v] of treeMap) {\r",
									"      if (!k || typeof v === 'object') {\r",
									"        continue;\r",
									"      }\r",
									"      if (v !== null && v !== undefined && String(v)) {\r",
									"        s2s += `${k}=${v}&`;\r",
									"      }\r",
									"    }\r",
									"    return s2s.slice(0, -1);\r",
									"  }\r",
									"}\r",
									"\r",
									"const queryParams = pm.request.url.query;\r",
									"let paramsMap = new Map();\r",
									"let timestamp = (new Date()).getTime().toString();\r",
									"console.log(\"timestamp is :\", timestamp);\r",
									"paramsMap.set(\"appid\", pm.environment.get(\"appid\"));\r",
									"paramsMap.set(\"timestamp\", timestamp);\r",
									"queryParams.each(param => {\r",
									"  paramsMap.set(param.key, param.value);\r",
									"});\r",
									"\r",
									"console.log(\"Query Params (Object):\", paramsMap);\r",
									"\r",
									"let signString = HmacUtil.getStringToSign(paramsMap);\r",
									"console.log(\"signString is:\", signString);\r",
									"let sign = HmacUtil.hmac256(pm.environment.get(\"secretKey\"), signString);\r",
									"console.log(\"sign is:\", sign);\r",
									"pm.environment.set(\"timestamp\",timestamp);\r",
									"pm.environment.set(\"sign\", sign);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "appid",
								"value": "{{appid}}",
								"type": "text"
							},
							{
								"key": "timestamp",
								"value": "{{timestamp}}",
								"type": "text"
							},
							{
								"key": "sign",
								"value": "{{sign}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/payin-service/api/rate?baseCurrency=AEDB&targetCurrency=PHP",
							"host": [
								"{{host}}"
							],
							"path": [
								"payin-service",
								"api",
								"rate"
							],
							"query": [
								{
									"key": "baseCurrency",
									"value": "AEDB"
								},
								{
									"key": "targetCurrency",
									"value": "PHP"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "testGetBalance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Fixed the incorrect usage of CryptoJS.HmacSHA256\r",
									"class HmacUtil {\r",
									"  static hmac256(key, msg) {\r",
									"    const mac = CryptoJS.HmacSHA256(msg, key); // Corrected the order of parameters\r",
									"    const data = CryptoJS.enc.Hex.stringify(mac).toLowerCase(); // Changed update and digest to enc.Hex.stringify\r",
									"    console.log(`HmacSHA256 rawContent is [${msg}], key is [${key}], hash result is [${data}]`);\r",
									"    return data;\r",
									"  }\r",
									"\r",
									"  static getStringToSign(params) {\r",
									"    const treeMap = params instanceof Map\r",
									"      ? new Map([...params.entries()].sort())\r",
									"      : new Map(Object.entries(params).sort());\r",
									"    let s2s = '';\r",
									"\r",
									"    for (const [k, v] of treeMap) {\r",
									"      if (!k || typeof v === 'object') {\r",
									"        continue;\r",
									"      }\r",
									"      if (v !== null && v !== undefined && String(v)) {\r",
									"        s2s += `${k}=${v}&`;\r",
									"      }\r",
									"    }\r",
									"    return s2s.slice(0, -1);\r",
									"  }\r",
									"}\r",
									"\r",
									"const queryParams = pm.request.url.query;\r",
									"let paramsMap = new Map();\r",
									"let timestamp = (new Date()).getTime().toString();\r",
									"console.log(\"timestamp is :\", timestamp);\r",
									"paramsMap.set(\"appid\", pm.environment.get(\"appid\"));\r",
									"paramsMap.set(\"timestamp\", timestamp);\r",
									"queryParams.each(param => {\r",
									"  paramsMap.set(param.key, param.value);\r",
									"});\r",
									"\r",
									"console.log(\"Query Params (Object):\", paramsMap);\r",
									"\r",
									"let signString = HmacUtil.getStringToSign(paramsMap);\r",
									"console.log(\"signString is:\", signString);\r",
									"let sign = HmacUtil.hmac256(pm.environment.get(\"secretKey\"), signString);\r",
									"console.log(\"sign is:\", sign);\r",
									"pm.environment.set(\"timestamp\",timestamp);\r",
									"pm.environment.set(\"sign\", sign);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "appid",
								"value": "{{appid}}",
								"type": "text"
							},
							{
								"key": "timestamp",
								"value": "{{timestamp}}",
								"type": "text"
							},
							{
								"key": "sign",
								"value": "{{sign}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/payin-service/api/balance?crypto=AEDB",
							"host": [
								"{{host}}"
							],
							"path": [
								"payin-service",
								"api",
								"balance"
							],
							"query": [
								{
									"key": "crypto",
									"value": "AEDB"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "testSupportChannelQuery",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Fixed the incorrect usage of CryptoJS.HmacSHA256\r",
									"class HmacUtil {\r",
									"  static hmac256(key, msg) {\r",
									"    const mac = CryptoJS.HmacSHA256(msg, key); // Corrected the order of parameters\r",
									"    const data = CryptoJS.enc.Hex.stringify(mac).toLowerCase(); // Changed update and digest to enc.Hex.stringify\r",
									"    console.log(`HmacSHA256 rawContent is [${msg}], key is [${key}], hash result is [${data}]`);\r",
									"    return data;\r",
									"  }\r",
									"\r",
									"  static getStringToSign(params) {\r",
									"    const treeMap = params instanceof Map\r",
									"      ? new Map([...params.entries()].sort())\r",
									"      : new Map(Object.entries(params).sort());\r",
									"    let s2s = '';\r",
									"\r",
									"    for (const [k, v] of treeMap) {\r",
									"      if (!k || typeof v === 'object') {\r",
									"        continue;\r",
									"      }\r",
									"      if (v !== null && v !== undefined && String(v)) {\r",
									"        s2s += `${k}=${v}&`;\r",
									"      }\r",
									"    }\r",
									"    return s2s.slice(0, -1);\r",
									"  }\r",
									"}\r",
									"\r",
									"const queryParams = pm.request.url.query;\r",
									"let paramsMap = new Map();\r",
									"let timestamp = (new Date()).getTime().toString();\r",
									"console.log(\"timestamp is :\", timestamp);\r",
									"paramsMap.set(\"appid\", pm.environment.get(\"appid\"));\r",
									"paramsMap.set(\"timestamp\", timestamp);\r",
									"queryParams.each(param => {\r",
									"  paramsMap.set(param.key, param.value);\r",
									"});\r",
									"\r",
									"console.log(\"Query Params (Object):\", paramsMap);\r",
									"\r",
									"let signString = HmacUtil.getStringToSign(paramsMap);\r",
									"console.log(\"signString is:\", signString);\r",
									"let sign = HmacUtil.hmac256(pm.environment.get(\"secretKey\"), signString);\r",
									"console.log(\"sign is:\", sign);\r",
									"pm.environment.set(\"timestamp\",timestamp);\r",
									"pm.environment.set(\"sign\", sign);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "appid",
								"value": "{{appid}}",
								"type": "text"
							},
							{
								"key": "timestamp",
								"value": "{{timestamp}}",
								"type": "text"
							},
							{
								"key": "sign",
								"value": "{{sign}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/payin-service/api/supportChannel?currency=PHP",
							"host": [
								"{{host}}"
							],
							"path": [
								"payin-service",
								"api",
								"supportChannel"
							],
							"query": [
								{
									"key": "currency",
									"value": "PHP"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "testRemittanceOrderQuery",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Fixed the incorrect usage of CryptoJS.HmacSHA256\r",
									"class HmacUtil {\r",
									"  static hmac256(key, msg) {\r",
									"    const mac = CryptoJS.HmacSHA256(msg, key); // Corrected the order of parameters\r",
									"    const data = CryptoJS.enc.Hex.stringify(mac).toLowerCase(); // Changed update and digest to enc.Hex.stringify\r",
									"    console.log(`HmacSHA256 rawContent is [${msg}], key is [${key}], hash result is [${data}]`);\r",
									"    return data;\r",
									"  }\r",
									"\r",
									"  static getStringToSign(params) {\r",
									"    const treeMap = params instanceof Map\r",
									"      ? new Map([...params.entries()].sort())\r",
									"      : new Map(Object.entries(params).sort());\r",
									"    let s2s = '';\r",
									"\r",
									"    for (const [k, v] of treeMap) {\r",
									"      if (!k || typeof v === 'object') {\r",
									"        continue;\r",
									"      }\r",
									"      if (v !== null && v !== undefined && String(v)) {\r",
									"        s2s += `${k}=${v}&`;\r",
									"      }\r",
									"    }\r",
									"    return s2s.slice(0, -1);\r",
									"  }\r",
									"}\r",
									"\r",
									"const requestBody  = pm.request.body.raw;\r",
									"console.log(requestBody)\r",
									"let bodyData;\r",
									"try {\r",
									"    bodyData = JSON.parse(requestBody);\r",
									"    console.log(\"Parsed Body:\", bodyData);\r",
									"} catch (e) {\r",
									"    console.error(\"Invalid JSON:\", e);\r",
									"    bodyData = {}; // 默认空对象\r",
									"}\r",
									"paramsMap = new Map(Object.entries(bodyData));\r",
									"let timestamp = (new Date()).getTime().toString();\r",
									"console.log(\"timestamp is :\", timestamp);\r",
									"paramsMap.set(\"appid\", pm.environment.get(\"appid\"));\r",
									"paramsMap.set(\"timestamp\", timestamp);\r",
									"\r",
									"console.log(\"Query Params (Object):\", paramsMap);\r",
									"\r",
									"let signString = HmacUtil.getStringToSign(paramsMap);\r",
									"console.log(\"signString is:\", signString);\r",
									"let sign = HmacUtil.hmac256(pm.environment.get(\"secretKey\"), signString);\r",
									"console.log(\"sign is:\", sign);\r",
									"pm.environment.set(\"timestamp\",timestamp);\r",
									"pm.environment.set(\"sign\", sign);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "appid",
								"value": "{{appid}}",
								"type": "text"
							},
							{
								"key": "timestamp",
								"value": "{{timestamp}}",
								"type": "text"
							},
							{
								"key": "sign",
								"value": "{{sign}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"startTime\": 1746848894000,\r\n    \"endTime\": 1747280894000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/payin-service/api/remittance/orders/list",
							"host": [
								"{{host}}"
							],
							"path": [
								"payin-service",
								"api",
								"remittance",
								"orders",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "testRemittanceOrderApplyAdapter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Fixed the incorrect usage of CryptoJS.HmacSHA256\r",
									"class HmacUtil {\r",
									"  static hmac256(key, msg) {\r",
									"    const mac = CryptoJS.HmacSHA256(msg, key); // Corrected the order of parameters\r",
									"    const data = CryptoJS.enc.Hex.stringify(mac).toLowerCase(); // Changed update and digest to enc.Hex.stringify\r",
									"    console.log(`HmacSHA256 rawContent is [${msg}], key is [${key}], hash result is [${data}]`);\r",
									"    return data;\r",
									"  }\r",
									"\r",
									"  static getStringToSign(params) {\r",
									"    const treeMap = params instanceof Map\r",
									"      ? new Map([...params.entries()].sort())\r",
									"      : new Map(Object.entries(params).sort());\r",
									"    let s2s = '';\r",
									"\r",
									"    for (const [k, v] of treeMap) {\r",
									"      if (!k || typeof v === 'object') {\r",
									"        continue;\r",
									"      }\r",
									"      if (v !== null && v !== undefined && String(v)) {\r",
									"        s2s += `${k}=${v}&`;\r",
									"      }\r",
									"    }\r",
									"    return s2s.slice(0, -1);\r",
									"  }\r",
									"}\r",
									"\r",
									"const requestBody  = pm.request.body.raw;\r",
									"console.log(requestBody)\r",
									"let bodyData;\r",
									"try {\r",
									"    bodyData = JSON.parse(requestBody);\r",
									"    console.log(\"Parsed Body:\", bodyData);\r",
									"} catch (e) {\r",
									"    console.error(\"Invalid JSON:\", e);\r",
									"    bodyData = {}; // 默认空对象\r",
									"}\r",
									"paramsMap = new Map(Object.entries(bodyData));\r",
									"let timestamp = (new Date()).getTime().toString();\r",
									"console.log(\"timestamp is :\", timestamp);\r",
									"paramsMap.set(\"appid\", pm.environment.get(\"appid\"));\r",
									"paramsMap.set(\"timestamp\", timestamp);\r",
									"\r",
									"console.log(\"Query Params (Object):\", paramsMap);\r",
									"\r",
									"let signString = HmacUtil.getStringToSign(paramsMap);\r",
									"console.log(\"signString is:\", signString);\r",
									"let sign = HmacUtil.hmac256(pm.environment.get(\"secretKey\"), signString);\r",
									"console.log(\"sign is:\", sign);\r",
									"pm.environment.set(\"timestamp\",timestamp);\r",
									"pm.environment.set(\"sign\", sign);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "appid",
								"value": "{{appid}}",
								"type": "text"
							},
							{
								"key": "timestamp",
								"value": "{{timestamp}}",
								"type": "text"
							},
							{
								"key": "sign",
								"value": "{{sign}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"domesticAmount\":51,\"domesticCurrency\":\"PHP\",\"exchangeRate\":15.156575,\"foreignAmount\":3.36,\"foreignCurrency\":\"AEDB\",\"merchantOrderNo\":\"test1747289072769\",\"recipientExtraData\":\"{\\\"firstName\\\":\\\"monaliza\\\",\\\"lastName\\\":\\\"ebrahim\\\",\\\"phone\\\":\\\"09912345678\\\",\\\"email\\\":\\\"Msiodora@yahoo.com\\\",\\\"accountNo\\\":\\\"999999\\\",\\\"transactionChannel\\\":\\\"INSTAPAY\\\",\\\"transactionChannelName\\\":\\\"INSTAPAY\\\",\\\"transactionSubject\\\":\\\"gcash\\\",\\\"transactionSubjectName\\\":\\\"GCash\\\"}\",\"senderExtraData\":\"{\\\"fullName\\\":\\\"Kobe Bryant\\\",\\\"transactionSubjectName\\\":\\\"GCash\\\"}\",\"supportChannel\":645}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/payin-service/api/remittance/apply/adapter",
							"host": [
								"{{host}}"
							],
							"path": [
								"payin-service",
								"api",
								"remittance",
								"apply",
								"adapter"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}